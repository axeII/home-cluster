---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  ANSIBLE_PLAYBOOK_DIR: "{{.ANSIBLE_DIR}}/playbooks"
  ANSIBLE_INVENTORY_DIR: "{{.ANSIBLE_DIR}}/inventory"
  ANSIBLE_REQUIREMENTS_FILE: "{{.ANSIBLE_DIR}}/requirements.yaml"
  ANSIBLE_PIP_REQUIREMENTS_FILE: "{{.ANSIBLE_DIR}}/requirements.txt"
  ANSIBLE_INVENTORY_FILE: "{{.ANSIBLE_INVENTORY_DIR}}/hosts.yml"

env:
  ANSIBLE_CONFIG: "{{.ROOT_DIR}}/ansible.cfg"
  K8S_AUTH_KUBECONFIG: "{{.ROOT_DIR}}/kubeconfig"

tasks:
  deps:
    desc: Set up Ansible dependencies
    # deps: [":workstation:venv"]
    cmds:
      - '{{.VIRTUAL_ENV}}/bin/python3 -m pip install --upgrade --requirement "{{.ANSIBLE_PIP_REQUIREMENTS_FILE}}"'
      - '{{.VIRTUAL_ENV}}/bin/ansible-galaxy install --role-file "{{.ANSIBLE_REQUIREMENTS_FILE}}" {{if eq .force "true"}}--force{{end}}'
    preconditions:
      - {
        msg: "Missing Ansible requirements file",
        sh: "test -f {{.ANSIBLE_REQUIREMENTS_FILE}}",
      }
      - {
        msg: "Missing Pip requirements file",
        sh: "test -f {{.ANSIBLE_PIP_REQUIREMENTS_FILE}}",
      }
    sources:
      - "{{.ANSIBLE_REQUIREMENTS_FILE}}"
      - "{{.ANSIBLE_PIP_REQUIREMENTS_FILE}}"
    generates:
      - "{{.VIRTUAL_ENV}}/bin/ansible"
      - "{{.VIRTUAL_ENV}}/bin/ansible-galaxy"
    vars:
      force: '{{.force | default "true"}}'

  init:
    desc: Install / Upgrade Ansible galaxy deps
    dir: "{{.ANSIBLE_DIR}}"
    cmds:
      - pip3 install --user --requirement requirements.txt
      - ansible-galaxy install -r requirements.yml --roles-path ~/.ansible/roles --force
      - ansible-galaxy collection install -r requirements.yml --collections-path ~/.ansible/collections --force

  list:
    desc: List all the hosts
    dir: "{{.ANSIBLE_DIR}}"
    cmds:
      - ansible all -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml --list-hosts

  run:
    desc: Run an Ansible playbook for configuring a cluster
    summary: |
      Args:
        playbook: Playbook to run (required)
    prompt: Run Ansible playbook '{{.playbook}}'... continue?
    # deps: ["deps"]
    cmd: "ansible-playbook --inventory {{.ANSIBLE_INVENTORY_FILE}} {{.ANSIBLE_PLAYBOOK_DIR}}/{{.playbook}}.yaml {{.CLI_ARGS}}"
    requires:
      vars: ["playbook"]
    preconditions:
      - {
        msg: "Missing Ansible inventory file",
        sh: "test -f {{.ANSIBLE_INVENTORY_FILE}}",
      }

  prepare:
    desc: Prepare all the k8s nodes for running k3s
    dir: "{{.ANSIBLE_DIR}}"
    cmds:
      - ansible-playbook -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml {{.ANSIBLE_PLAYBOOK_DIR}}/cluster-prepare.yml

  install:
    desc: Install Kubernetes on the nodes
    dir: "{{.ANSIBLE_DIR}}"
    cmds:
      - ansible-playbook -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml {{.ANSIBLE_PLAYBOOK_DIR}}/database-create.yaml
      - ansible-playbook -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml {{.ANSIBLE_PLAYBOOK_DIR}}/cluster-installation.yml

  nuke:
    desc: Uninstall Kubernetes on the nodes
    dir: "{{.ANSIBLE_DIR}}"
    interactive: true
    cmds:
      - ansible-playbook -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml {{.ANSIBLE_PLAYBOOK_DIR}}/cluster-nuke.yml
      - ansible-playbook -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml {{.ANSIBLE_PLAYBOOK_DIR}}/database-nuke.yaml
      - task: force-reboot

  ping:
    desc: Ping all the hosts
    dir: "{{.ANSIBLE_DIR}}"
    cmds:
      - ansible all -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml --one-line -m 'ping'

  uptime:
    desc: Uptime of all the hosts
    dir: "{{.ANSIBLE_DIR}}"
    cmds:
      - ansible all -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml --one-line -a 'uptime'

  rollout-reboot:
    desc: Rollout a reboot across all the k8s nodes
    dir: "{{.ANSIBLE_DIR}}"
    cmds:
      - ansible-playbook -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml {{.ANSIBLE_PLAYBOOK_DIR}}/cluster-rollout-reboot.yml

  force-reboot:
    desc: Reboot all the k8s nodes
    dir: "{{.ANSIBLE_DIR}}"
    cmds:
      - ansible-playbook -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml {{.ANSIBLE_PLAYBOOK_DIR}}/cluster-reboot.yml

  force-poweroff:
    desc: Shutdown all the k8s nodes
    dir: "{{.ANSIBLE_DIR}}"
    cmds:
      - ansible kubernetes -i {{.ANSIBLE_INVENTORY_DIR}}/hosts.yml -a '/usr/bin/systemctl poweroff' --become
